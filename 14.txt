package com.example.jetapplication

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Build
import android.os.Bundle
import android.os.IBinder
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.collectAsState
import androidx.core.content.ContextCompat
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.cancel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlin.math.pow


class MyService : Service() {
   private fun fibonacci(n: Int): Int {
        if (n == 0) return 0
       if (n == 1) return 1

       var a = 0
       var b =1

        for (i in 1..n  ) {
            val c = a + b
            a = b
            b = c
        }

        return b
    }
    private val scope = CoroutineScope(Dispatchers.Default)
    private var job: Job? = null
    override fun onBind(intent: Intent): IBinder? {
        return null
    }
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        if (intent!!.action=="START") {
            var n = intent!!.getIntExtra("NUMBER", 0)
            var a = intent!!.getIntExtra("a", 0)
            var b = intent!!.getIntExtra("b", 1)
            var i=intent!!.getIntExtra("i", 1)
            if (job==null) {
                job = scope.launch {
                    delay(1000)
                    val intentBroadcast = Intent("MGKIT")
                    var c=0
                    if (i <=n) {
                         c= a + b
                        a = b
                        i++
                    }
                  val result = c
                    if (n==0||n==1) {
                        intentBroadcast.putExtra("NUMBER", n)
                      //  intentBroadcast.putExtra("a",a)
                       // intentBroadcast.putExtra("b",b)
                        intentBroadcast.putExtra("i",n)
                    }
                    else {
                        intentBroadcast.putExtra("NUMBER", result)
                        intentBroadcast.putExtra("a",a)
                        intentBroadcast.putExtra("b",b)
                        intentBroadcast.putExtra("i",i)
                    }
                    sendBroadcast(intentBroadcast)
                    job = null
                }
            }
        }
        if (intent!!.action=="STOP") {
            job?.cancel()
            job = null
        }
        return START_STICKY
    }

}

class MyBroadcastReceiver: BroadcastReceiver() {
    private val mutableStateFlow =
        MutableStateFlow<Int?>(null)
    val stateFlow = mutableStateFlow.asStateFlow()
    private val scope = CoroutineScope(Dispatchers.Default)
    override fun onReceive(p0: Context?, p1: Intent?) {
        if (p1!=null) {
            val result = p1.getIntExtra("NUMBER",0)
            scope.launch {
                mutableStateFlow.emit(result)
            }
        }
    }
    fun cancel() = scope.cancel()
}

class MainActivity : ComponentActivity() {
    lateinit var broadcastReceiver: MyBroadcastReceiver
    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(broadcastReceiver)
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        broadcastReceiver = MyBroadcastReceiver()
        val filter = IntentFilter("MGKIT")
        ContextCompat.registerReceiver(
            this, broadcastReceiver, filter,
            ContextCompat.RECEIVER_NOT_EXPORTED
        )
        //Создание канала для оповещений
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val manager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            val channel =
                NotificationChannel("MGKIT", "Вычислитель", NotificationManager.IMPORTANCE_DEFAULT)
            manager.createNotificationChannel(channel)
        }
        setContent {
            Column {
                Button(onClick = {
                    val intent = Intent(this@MainActivity, MyService::class.java)
                    intent.putExtra("NUMBER", 8)
                    intent.putExtra("a",0)
                    intent.putExtra("b",1)
                    intent.putExtra("i",1)
                    intent.action = "START"
                    startService(intent)
                }) {
                    Text("Запустить")
                }
                Button(onClick = {
                    val intent = Intent(this@MainActivity, MyService::class.java)
                    intent.action = "STOP"
                    startService(intent)
                }) {
                    Text("Остановить")
                }
                val result = broadcastReceiver.stateFlow.collectAsState()
                Text(result.value.toString())
            }
            }
            }
}