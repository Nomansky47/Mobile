interface Ishoreable{
    var waterObject: String
    var region: String
    val coordinates: IntArray
    var length:Int
    val date:IntArray
}

interface Ifactory{
    fun create(obj:String,reg:String,coord:IntArray, length:Int, date:IntArray):Ishoreable
}

interface Iscanner{
    fun scan(ErrorHandler:ErrorHandler):Ishoreable?
}
interface IShList{
    fun get():List<Ishoreable>
    fun add(newShore:Ishoreable)
    fun <R:Comparable<R>> doSort(obj:(Ishoreable)->R?)
    fun change(i:Int,newShore:Ishoreable)
    fun delete(i:Int)
}

interface IShoresPrinter{
    fun printAllInformation(listShores: List<Ishoreable>)
}

interface ISearch{
    fun searchInside(thisShores: List<Ishoreable>,  name:String):List<Ishoreable>
}

interface IItem{
    val id:Int
    val name:String
    fun doAction()
}

interface IMenuPrinter{
    fun print(menu:IMenu)
}

interface IMenu{
    val items:MutableList<IItem>
    fun doAction(id:Int)
    fun start(mylist:List<IItem>)
}

interface IErrorHandler{
    val items:MutableList<IErrorItem>
    fun checkErr(id:Int,str: String?):Boolean
    fun start(mylist:List<IErrorItem>)
}

interface IErrorItem{
    fun doCheck(str: String?):Boolean
}

class IllegalShores:Ishoreable {
    override var waterObject: String = ""
    override var region: String = ""
    override val coordinates: IntArray = intArrayOf(0, 0, 0)
    override var length: Int = 0
    override val date: IntArray = intArrayOf(0, 0, 0)
}

class ShoresFactory:Ifactory
{
   override fun create(obj:String,reg:String,coord:IntArray, length:Int, date:IntArray):Ishoreable
    {
        val new=IllegalShores()
        new.waterObject=obj
        new.region=reg
        for (i in 0..2) {
            new.date[i] =date[i]
            new.coordinates[i]=coord[i]
        }
        new.length=length
        return new
    }
}

class ErrorItem(id:Int, private val action: (String?) -> Boolean):IErrorItem
{
    override val id:Int=id
    override fun doCheck(str: String?):Boolean {
        return action.invoke(str)
    }
}

class ErrorHandler:IErrorHandler
{
    override val items:MutableList<IErrorItem> = mutableListOf()
    override fun checkErr(id:Int,str: String?):Boolean{
        return items.first { it.id==id  }.doCheck(str)
    }
    override fun start(mylist:List<IErrorItem>)
    {
        for (element in mylist) items.add(element)
    }
}

class ShoresScanner:Iscanner{
    override fun scan(ErrorHandler:ErrorHandler):Ishoreable?
    {
        var err=false
        println()
        println("Write Object Name")
        val waterObject = readlnOrNull()
        err=ErrorHandler.checkErr(1,waterObject)
        println("Write Region Name")
        val region = readlnOrNull()
        err=ErrorHandler.checkErr(1,region)
        println("Write Coordinates")
        val ss = readlnOrNull()
        val coordinates = intArrayOf(0, 0, 0)
        if (!ss.isNullOrEmpty()) {
            val s = ss.split(" ")
            coordinates[0] = s.first().toIntOrNull() ?: 0
            coordinates[1] = s[1].toIntOrNull() ?: 0
            coordinates[2] = s.last().toIntOrNull() ?: 0
        } else err=ErrorHandler.checkErr(2,ss)
        println("Write Length")
        val length = readlnOrNull()?.toIntOrNull()
        if (length==null) err=true
        println("Write Date")
        val nn = readlnOrNull()
        val date = intArrayOf(0, 0, 0)
        if (!nn.isNullOrEmpty()) {
            val n=nn.split(" ")
            date[0] = n[0].toIntOrNull() ?: 0
            date[1] = n[1].toIntOrNull() ?: 0
            date[2] = n[2].toIntOrNull() ?: 0
        } else err=true
        if (err) return null
        else
        return ShoresFactory().create(waterObject!!,region!!,coordinates,length!!,date)
    }
}

class ShoresList:IShList {
     private val BD: MutableList<Ishoreable> = mutableListOf()
    override fun get():List<Ishoreable>
     {
         return BD.toList()
     }
    override fun<R:Comparable<R>> doSort(obj:(Ishoreable)->R? )
    {
            BD.sortBy(obj)
    }

    override fun add(newShore:Ishoreable)
    {
       BD.add(newShore)
    }
    override fun change(i:Int,newShore:Ishoreable)
    {
        BD[i]= newShore
    }
    override fun delete(i:Int)
    {
        BD.removeAt(i)
    }
}

class ShoresPrinter:IShoresPrinter
{
    private fun printAllOf(shores:Ishoreable)
    {
        print("| ${shores.waterObject} |")
        print(" ${shores.region} | ")
        for(i in shores.coordinates) print("$i ")
        print("| ${shores.length} | ")
        for(i in shores.date) print("$i ")
        print("|")
        println()
    }
    override fun printAllInformation(listShores: List<Ishoreable>)
    {
        listShores.forEachIndexed{  i, shore -> print("| $i "); printAllOf(shore) }
    }
}

class ShoresSearch:ISearch
{
    override fun searchInside(  thisShores: List<Ishoreable>,  name:String):List<Ishoreable>
    {
       return thisShores.filter { it.waterObject.contains(name)}
    }

}

class MenuItem(id:Int,name:String, private val action: () -> Unit):IItem
{
    override val id:Int=id
    override val name:String=name
    override fun doAction() {
        action.invoke()
    }
}

class MenuPrint:IMenuPrinter {
    override fun print(menu: IMenu)
    {
        print("Choose the option (pick a number).")
        menu.items.forEach{print(" ${it.id} ${it.name}.")}
        println()
    }
}

class Menu:IMenu
{
    override val items:MutableList<IItem> = mutableListOf()
    override fun doAction(id:Int){
        items.first { it.id==id  }.doAction()
    }
    override fun start(mylist:List<IItem>)
    {
        for (element in mylist) items.add(element)
    }
}

fun menuBuilder(ShoresList:IShList,ShoresScanner:Iscanner,ShoresPrinter:IShoresPrinter,ErrorHandler: ErrorHandler):List<IItem>
{
    val f1=MenuItem(1,"Print") {
        println("| Index | WaterObject | Region | Coordinates | Length | Date |")
        ShoresPrinter.printAllInformation(ShoresList.get())
    }
    val f2=MenuItem(2,"Create")
    {
        val obj=ShoresScanner.scan(ErrorHandler)
        if (obj!=null) {
            ShoresList.add(obj)
            println("Created successfully")
        } else println("Error")
    }
    val f3=MenuItem(3,"Change")
    {
        println("Write element index, that you want to change")
        val i= readlnOrNull()?.toIntOrNull()
        val obj=ShoresScanner.scan(ErrorHandler)
        if (i != null && ShoresList.get().elementAtOrNull(i) != null&&obj!=null) {
            ShoresList.change(i,obj )
        }
        else println("Error")
    }
    val f4=MenuItem(4,"Delete")
    {
        print("Write index:")
        val i = readlnOrNull()?.toIntOrNull()
        if (i != null && ShoresList.get().elementAtOrNull(i) != null)
        {
            ShoresList.delete(i)
            println("Deleted successfully")
        } else println("Error")
    }
    val f5=MenuItem(5,"Sort")
    {
        println("Write thing, that you want to sort. 1 - WaterObject. 2- Region. 3 - Coordinates. 4 - Length. 5 - Date.")
        //obj:(IllegalShores)->R
        val s= readlnOrNull()?.toIntOrNull()?:1
        when (s)
        {
            1->ShoresList.doSort { it.waterObject }
            2->ShoresList.doSort{ it.region }
            3->ShoresList.doSort { it.coordinates[0]+it.coordinates[1]*10+it.coordinates[3]*100 }
            4->ShoresList.doSort{it.length}
            5->ShoresList.doSort{it.date[0]+it.date[1]*10+it.date[3]*100}
        }
        if (s !in 1..5) println("Error")
    }
    val f6=MenuItem(6,"Search")
    {
        print("Print waterObject for search:")
        val str = readlnOrNull() ?: ""
        ShoresPrinter.printAllInformation(ShoresSearch().searchInside(ShoresList.get(), str))
    }
    return listOf(f1,f2,f3,f4,f5,f6)
}

fun errBuilder():List<IErrorItem>
{

}

fun main() {
    var choise=0
    val shlist=ShoresList()
    val menu=Menu()
    val ErrorHandler=ErrorHandler().start()
    menu.start(menuBuilder(shlist,ShoresScanner(), ShoresPrinter()))
    while(true)
    {
        MenuPrint().print(menu)
        choise= readln().toIntOrNull()?:1
        menu.doAction(choise)
    }
}