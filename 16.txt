 package com.example.jetapplication

import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    val flowX = MutableStateFlow(0.0F)
    val flowY = MutableStateFlow(0.0F)
    val flowZ = MutableStateFlow(0.0F)
    val flowT = MutableStateFlow(0L)
//ускорение -> скорость -> расстояние (формулы равноускор. движения)

    val manager by lazy { getSystemService(SENSOR_SERVICE) as SensorManager}
    val sensor  by lazy {manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)}
    val listener = object:SensorEventListener {
        override fun onSensorChanged(event: SensorEvent?) {
            if (event!=null) {
                val x = event.values[0]
                val y = event.values[1]
                val z = event.values[2]
                val stamp = event.timestamp
                lifecycleScope.launch {
                    flowX.emit(x)
                    flowY.emit(y)
                    flowZ.emit(z)
                    flowT.emit(stamp)
                }
            }
        }
        override fun onAccuracyChanged(p0: Sensor?, p1: Int) {
            //      if (p1 = SensorManager.ACCU)
            //       TODO("Not yet implemented")
        }

    }

    override fun onStop() {
        super.onStop()
        manager.unregisterListener(listener)

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)


        val sensors = manager.getSensorList(Sensor.TYPE_ALL)
        sensors.forEach {
            Log.d("MGKIT","Name: ${it.name} type: ${it.stringType} vendor: ${it.vendor} version: ${it.version}")

        }



        manager.registerListener(listener,sensor,SensorManager.SENSOR_DELAY_NORMAL)



        setContent {
            val x by flowX.collectAsState()
            val y by flowY.collectAsState()
            val z by flowZ.collectAsState()
            val t by flowT.collectAsState()
            var answ= rememberSaveable {mutableStateOf("")}
            Column() {
                Text("x: ${x}")
                Text("y: ${y}")
                Text("z: ${z}")
                Text("t: ${t}")
            }
        }
    }
}


