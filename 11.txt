package com.example.jetapplication

import android.os.Bundle
import android.provider.Settings.Global.getString
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.testTag
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EnterNumber(
    numberChanged:(String?)->Unit,
    label: String,
    modifier: Modifier= Modifier) {
    val number= rememberSaveable { mutableStateOf("") }
    TextField(number.value, {
        number.value=if (it.toIntOrNull()!=null||it=="-") {
            numberChanged(it)
            it
        }
        else number.value}, label = {
        Text(label)
    },modifier = modifier
    )

}

@Composable
fun ShowAnswer(num: String?,modifier: Modifier = Modifier) {
    Text("Ответ: "+num.toString(),modifier = modifier)
}

@Composable
fun Add(viewModel: AddViewModel,modifier: Modifier = Modifier) {
    Column(modifier) {

        var num1 by rememberSaveable { mutableStateOf<String?>(null) }
        EnterNumber({num1 = it},stringResource(R.string.write_some_numbers))
        Button(onClick = {
            val n1 = num1?.toIntOrNull()
            if (n1!=null&&n1>0) {
                viewModel.add(n1)
            }
        }) {
            Text("Button")
        }

        val result = viewModel.resultStateFlow.collectAsState()
        if (result.value!=null) {
            ShowAnswer(result.value)
        }
    }


}

class Mathfunc {
    fun doMath(i: Int) : String {
        var stranswer = ""
        var intanswer=i
            var i = 2
            stranswer = "$intanswer ="
            do {
                if (intanswer % i == 0) {
                    stranswer += " $i *"
                    intanswer /= i
                } else {
                    i++
                }
            } while (intanswer != 1)
            return "$stranswer 1"
        return stranswer
    }
}
class MainActivity : ComponentActivity() {
    private val viewModel by lazy {AddViewModel.getInstance()}
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
           Add(viewModel)
        }
    }
}

///AddModel
package com.example.jetapplication

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class AddModel {
    fun doMath(i: Int) : String {
        var stranswer = ""
        var intanswer=i
        var i = 2
        stranswer = "$intanswer ="
        do {
            if (intanswer % i == 0) {
                stranswer += " $i *"
                intanswer /= i
            } else {
                i++
            }
        } while (intanswer != 1)
        return "$stranswer 1"
        return stranswer
    }
}

class AddViewModel private constructor() {



    private val resultMutableStateFlow = MutableStateFlow<String?>(null)
    val resultStateFlow = resultMutableStateFlow.asStateFlow()

    private val scope = CoroutineScope(Dispatchers.Default)

    fun add(x:Int) {
        val res = AddModel().doMath(x)
        scope.launch {
            resultMutableStateFlow.emit(res)
        }
    }

    companion object {
        private var instance:AddViewModel? = null

        fun getInstance():AddViewModel {
            if (instance==null) instance = AddViewModel()
            return instance!!
        }
    }
}